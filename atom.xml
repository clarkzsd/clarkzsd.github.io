<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sytone&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoushidong.cc/"/>
  <updated>2018-01-15T12:43:50.472Z</updated>
  <id>http://zhoushidong.cc/</id>
  
  <author>
    <name>Sytone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移至 Ghost</title>
    <link href="http://zhoushidong.cc/2018/01/15/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://zhoushidong.cc/2018/01/15/博客迁移/</id>
    <published>2018-01-15T12:19:11.000Z</published>
    <updated>2018-01-15T12:43:50.472Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 已弃用，博客已迁移至 <a href="http://blog.sytone.me" target="_blank" rel="noopener">http://blog.sytone.me</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 已弃用，博客已迁移至 &lt;a href=&quot;http://blog.sytone.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sytone.me&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Hexo 已弃用，博客已迁移至 http://blog.sytone.me" scheme="http://zhoushidong.cc/tags/Hexo-%E5%B7%B2%E5%BC%83%E7%94%A8%EF%BC%8C%E5%8D%9A%E5%AE%A2%E5%B7%B2%E8%BF%81%E7%A7%BB%E8%87%B3-http-blog-sytone-me/"/>
    
  </entry>
  
  <entry>
    <title>谈谈博客</title>
    <link href="http://zhoushidong.cc/2018/01/09/20180109/"/>
    <id>http://zhoushidong.cc/2018/01/09/20180109/</id>
    <published>2018-01-09T12:22:31.000Z</published>
    <updated>2018-01-14T16:05:18.475Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，韩寒发了<a href="https://m.weibo.cn/1191258123/4193997045868748" target="_blank" rel="noopener">长文</a>，基本上是他在一条的采访的文字版。他在文中写了自己开始不写杂文的原因。是的，那个被称为新时代青年的精神领袖已经很久不写杂文（或者说博客）了。</p><p>问到他为什么现在不写杂文了，他说现在很多人在微信号、微博都写的很好，他不写也没什么。</p><p>韩寒凭借博客成为无数年轻人的偶像的那个互联网时代已经过去了。现在的互联网，人人都在发表自己的声音，只是形式跟以往相比发生了很大的变化。在 140 字微博大行其道的今天，很少有人会写博客了。当然，现在微博的字数限制已突破 140 字，长文也一直都有人写，微信公众号里面的长文也很多，唯独博客这个东西渐渐变得冷门。</p><p>作为一名 95 后，自己算是经历了互联网的这一演变过程。不过，博客真正比较火的时候我也只会玩网络游戏，除此之外互联网上发生什么变化那时的我毫不关心。但是回头一想，像我这样的 95 后其实也是使用过“博客”的，这个博客就是 qq 空间中的日志。</p><p>qq 空间中的日志其实就是一种博客，只是腾讯并没有把这个概念提出来罢了。年轻的时候谁没写过空间日志啊，什么伤感文字啊，忧郁心情啊……现在回头翻翻自己的空间，看看自己以前写的东西真的会脸红啊……我干脆直接把 qq 空间锁了，不让别人看，同时也删了一些太过暴露自己情感的东西。</p><p>在我刚上大学时，博客已经是个很冷门的东西了。而进入工作室以后，博客这个东西重新出现在我视野——工作室的师兄师姐大多有自己的博客。他们并没有使用新浪博客这样的平台，而是自己搭建的。或是技术学习，或是生活感悟，一边看他们的博客，我一边感叹：有个自己的博客简直太酷了。而且工作室也有自己的博客——知之。它的简介是这样的：</p><blockquote><p>知之是betahouse工作室的博客站，用於记录betahouse的每一份子的分享。</p><p>可以是技术总结，设计理念，摄影作品，人生感悟等等等等包罗万象。</p></blockquote><p>别看工作室玩技术玩设计如此酷炫，换个角度想想，其实 β-house 在大学生群体中是比较 old school 的存在——毕竟，现在很少有人在写博客了。</p><p>微博与博客的差别不仅仅体现在长度上。微博长文和微信文章的传播性的确很强，但是他们给人一种“这就是写给别人看的”的感觉。而博客不同，人们写博客首先是为了自我表达，其次才是分享给他人。</p><p>由于自己学习的领域的关系，我在网上遇到的写博客的人大多都是程序员。也遇到过少数摄影师、设计师的博客。他们的博文不仅仅包含自己专业相关的东西，也有自己的生活经历、对某个事物的独到见解等。几乎每个人的博客都留有评论框，然而除了几位在业界比较出名的人写的文章，并不是所有人的博文会得到他人的评论。但他们还是一篇篇写着，乐此不疲。</p><p>想起以前玩 qq 空间的时候，人们会到处发“空间互踩，有踩必回”的消息，巴不得每个人都能到自己的空间看看，欣赏欣赏自己的“才华”。而现在的博客作者虽然会在互联网的各个角落留下自己的博客入口，但也不会像“空间互踩”那样宣传自己的博客了。在这个人人能发声的时代，人们反而更加沉默了。</p><p>韩寒在长文里写道：</p><blockquote><p>自我表达是很奢侈的东西，你不能又要完全自我表达.</p><p>……</p><p>表达的出口有很多，比如诗歌，比如写作，比如唱歌……</p></blockquote><p>这么说，写博客便已经是在行奢侈之事了。</p><p>而我这个博客呢，除了寥寥数篇技术文章，剩下的或是些生活苦水，或是些“瞎想扯淡”。还是会坚持写博客的（以后要提高博文质量了，哈哈），有些想法，不写下来就会稍纵即逝；同时，写作也能让我更好地思考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天，韩寒发了&lt;a href=&quot;https://m.weibo.cn/1191258123/4193997045868748&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;长文&lt;/a&gt;，基本上是他在一条的采访的文字版。他在文中写了自己开始不写杂文的原因。是
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://zhoushidong.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>20180101</title>
    <link href="http://zhoushidong.cc/2018/01/01/20180101/"/>
    <id>http://zhoushidong.cc/2018/01/01/20180101/</id>
    <published>2018-01-01T14:02:31.000Z</published>
    <updated>2018-01-01T15:08:25.675Z</updated>
    
    <content type="html"><![CDATA[<p>今天是 2018 年的第一天。</p><p>不管 2017 年过得怎样 ，在 YearProgress 进度条归零的那一刻，对于 2017 或多或少有些不舍。毕竟，又是一年过去了。</p><p>在凌晨，收到了一位陌生人，三位好友的新年问候，就很开心。</p><p>今天，去看望了爷爷奶奶和太姥爷太姥姥。似乎每次放假回家，自己都会去看望他们。这个无意间养成的习惯，以后继续保持吧。</p><p>学校呆久了之后回到乡间会产生一种恍惚感，仿佛是两个不同的世界。</p><p>晚上吃饭时，和父亲一起吹了一听 Bear Beer。虽然自己酒量不错，但我本来是不喜欢酒的味道的，喝酒纯属是为了喝而喝。奇怪的是，今天吃完饭竟然还有想继续喝酒的想法……感觉酒这种东西和咖啡一样，开始喝时感觉味道不怎么样，但是喝多了就会上瘾。</p><p>明天返校，还欠着一堆大作业，比较愁。</p><p>晚安。</p>]]></content>
    
    <summary type="html">
    
      新年第一天。
    
    </summary>
    
      <category term="日记" scheme="http://zhoushidong.cc/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>再见，2017</title>
    <link href="http://zhoushidong.cc/2017/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2017/"/>
    <id>http://zhoushidong.cc/2017/12/31/再见，2017/</id>
    <published>2017-12-31T11:26:27.000Z</published>
    <updated>2018-01-01T14:01:49.423Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26090155&auto=1&height=66"></iframe><blockquote><p>2017，首先一曲《送别》送给你。</p></blockquote><p>一年又一年，按照我刚开始写这篇文章的时间算，2017 还有 5 个小时就要过去了。这一年我养成了记录生活的习惯，或是文字或是图像。不管过得快乐与否，总感觉生活的很多片刻都值得记录，不能让它们就这样流逝。所以，这篇年度总结也权当是这一年的粗略记录吧。</p><h2 id="电影与音乐"><a href="#电影与音乐" class="headerlink" title="电影与音乐"></a>电影与音乐</h2><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><p>豆瓣的年度报告显示今年我看了 66 部电影，作为一名伪影迷，这个数量对我来讲还算蛮多的。今年看了比较多的院线片，希望明年还能保持经常去电影院看电影的习惯，即使是一个人。在电影院看电影，就像是脱离现实去做一场两小时左右的梦，我太 TM 享受这样的体验了。</p><p>摘一段第十放映室常用的一句话：</p><blockquote><p>真正的好电影能让观众在走出放映室时有一种不真实感，好像影片里的世界才是真的世界。</p></blockquote><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>今年除了听网易云，还开始使用了 Apple Music，并且发现了不少好听的英文歌。下面列举一些我在今年发现的还不错的音乐</p><ol><li><p>《银翼杀手 2049》原声  (By Hans Zimmer/Benjamin Wallfisch)</p><ol><li>Tears In The Rain</li><li>Mesa</li><li>Can’t Help Falling in Love (原唱：猫王 Elvis Presley )</li></ol></li><li><p>《爱乐之城》原声</p></li><li><p>Wisdom Comes With Winters (By The Half Open Sky Gives Us Hope)</p><p>在 ahbing 公众号文章里发现的，很好听的后摇（一开始根本分不清哪个是歌曲名那个是歌手）</p></li><li><p>Sign of Times (By Harry Styles)</p></li><li><p>Hooked On a Feeling (By Blue Swede)</p></li><li><p>I Don’t Wanna Be (By 张学友)</p></li><li><p>让一切随风 (By Silver Ko)</p><p>电影《树大招风》片尾曲</p></li><li><p>Moutain Top (By RADWINMPS)</p><p>电影《妖猫传》片尾曲</p></li><li><p>Palace (By Sam Smith)</p><p>Apple AirPods 广告主题曲</p></li></ol><h2 id="一些变化"><a href="#一些变化" class="headerlink" title="一些变化"></a>一些变化</h2><ol><li><p>从对苹果无感到喜爱苹果的产品。</p><p>虽然一直手持 iPhone，但不知道为什么，一直对苹果的产品喜欢不起来。然而，自从我买了 AirPods 之后，对苹果的好感度暴增。</p><p>AirPods 真真太好用了，现在走到哪儿都离不开它，出门必带设备。最近心情一直很差，走在路上听听音乐能让自己稍微好受一些，从这个角度来讲，AirPods 绝对是我的最佳伴侣。AirPods 与苹果设备的连接、不同设备间切换也十分方便（然而现在自己的电脑仍然是 Windows PC）。记得 AirPods 刚出来的时候我还调侃过苹果取消 iPhone 耳机接口的设计，现在想想我真是自打脸啊。</p><p>苹果的应用生态方面，最近接触的也比以前多。这里不得不赞叹苹果的应用生态圈的强大，在接触过一些开发社群之后，很容易发现大多数独立应用开发者都喜欢在苹果家的平台上开发东西，因为其强大的生态能给双方带来双赢。这也是 iOS/MacOS 平台上有许多小而美的应用的原因。在 2018年会继续关注苹果的应用生态。</p><p>另外，苹果的跨平台体验做的也很不错。除了 AirPods 的切换，还有信息的接收、文件的传送在不同苹果设备之间都能很优雅的进行。”跨平台”也一直是微软的口号，而讽刺的是微软现在连自己手机都没有。</p><p>苹果的软件方面：网易云的版权流失让我不得不寻找别的音乐提供商，尝试了 Apple Music 发现还不错，学生价 5 元/月也很良心。</p></li><li><p>社交网络的选择 </p><p>今年下半年，我开始选择 twitter 来替代微博作为我接受互联网信息的主入口。twitter 与微博的优劣比较这里就不详谈了，twitter 最吸引我的就是它纯粹与宁静。微博太嘈杂了，鱼龙混杂，各种撕逼，timeline 上又是各种广告。 twitter 这边的人说话又好听，技术、新闻推的质量也很高，很适合睡前刷。</p><p>我也开始较为频繁地使用 instagram，分享一些自己认为还不错的照片。</p><p>使用这两个社交网络给我带来最大的惊喜是让我发现了许多有趣的人。</p></li><li><p>读书</p><p>虽然今年只读了六本书，但是相较于往年还是有进步的……</p></li></ol><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>在今天回顾一下这一整年，怎么说呢，没有其他的很特别的感情，只有对时间流逝之快的不适与错愕。</p><p>若要按照时间段分，就分成大二下、暑假、大三上这三个阶段来看吧。</p><h3 id="大二下"><a href="#大二下" class="headerlink" title="大二下"></a>大二下</h3><p>开学前拿到了驾照，从此不必在假期因驾照的事而回家，这让我感到很轻松。</p><p>开学之后的一个月，工作室终于拿到了自己办公室。我们也完成了对下一届成员的招新。总的来说，工作室已经成功在新校区扎下了根，后来虽有不如意的变动，但总体还算让人满意。</p><p>回到我个人，在上半年，在技术的积累方面虽有进步，但仍算缓慢。但是，一种较为正确的学习习惯在上半年算是养成了——遇到问题时，英文资料已是我的第一选择。</p><h3 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h3><p>呆在家里的假期的确会很安逸，但是，安逸会让我焦虑，非常焦虑，所以，大一的寒暑假我过得很不开心。2017 年一开始我就下定决心，今年暑假就不回家了。</p><p>暑假，我在在杭州一边学英语一边找了个实习。</p><p>找实习的经历感觉比实习本身更加难忘。面完第一家公司，成功拿下 offer 之后，跟在杭州的两位长辈碰面吃饭。那天的感觉很棒。实习过程当中，还认识了一位在杭电读研的学姐。</p><p>后来回想起来，找实习时发现了一个很巧合的点，面过的三家公司的主创团队都是从浙大走出来的……嗯，还有一些小经历这里就不详谈了……</p><h3 id="大三上"><a href="#大三上" class="headerlink" title="大三上"></a>大三上</h3><p>因为校区奇葩的地理位置，暑假每个工作日我都是杭州、临安来回跑，弄得人身心疲惫。所以那时候天天盼着开学，感觉还是上学舒服多了。</p><p>后来，就开学了。这一学期的课程安排比上学期还要紧，大部分时间都在上课。学校里的生活总的来说还算轻松，但久而久之，会让感到麻木，感觉自己都还没做什么事一天就这么过去了。决定不出国之后，目标也没有变得清晰起来。自己的状态从那时候开始持续萎靡，直到现在。</p><p>2017 年的最后两个月，发生了很多事，至少对我的内心而言，发生了很多事。心情一直很差，希望自己能早点走出来，也希望其他人能过得好。其他的事，就顺其自然吧。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>今年丧气满满的冬天让我觉得 2017 整年都糟透了，可是回顾一下之后，发现今年还是有所成长的。可能每年都是这样吧，没有十分地糟糕透顶，也并不会让人满意。在自我提升方面，让我略有遗憾的是，技术水平的进步没有自己想象中那么快。若要给这一年的自己打分的话，就差点及格吧。</p><p>最后，希望如朋友所说：</p><blockquote><p>明年一定是个好年。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="♥" scheme="http://zhoushidong.cc/categories/%E2%99%A5/"/>
    
    
      <category term="年度总结" scheme="http://zhoushidong.cc/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 异步编程一二三</title>
    <link href="http://zhoushidong.cc/2017/10/23/understanding-async-JavaScript/"/>
    <id>http://zhoushidong.cc/2017/10/23/understanding-async-JavaScript/</id>
    <published>2017-10-23T09:35:16.000Z</published>
    <updated>2017-12-14T17:19:46.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JavaScript-天生异步"><a href="#1-JavaScript-天生异步" class="headerlink" title="1. JavaScript 天生异步"></a>1. JavaScript 天生异步</h2><blockquote><p>你说我一个浏览器写写表单验证的，怎么就突然成为如今最流行的编程语言了呢？</p></blockquote><p>JavaScript 设计之初是用于浏览器端 GUI 编程，这就决定了这门语言是单线程、非阻塞的。而 JavaScript 正是通过异步执行任务来实现非阻塞。</p><p>关于 JavaScript 异步机制和 Event loop 详细可见：<a href="http://vimeo.com/96425312" target="_blank" rel="noopener">Help, I’m stuck in an event-loop</a></p><h2 id="2-异步函数的类型"><a href="#2-异步函数的类型" class="headerlink" title="2. 异步函数的类型"></a>2. 异步函数的类型</h2><p>JavaScript 环境本身提供的异步函数通常可以分为两大类：</p><ol><li>I/O 函数</li><li>计时函数</li></ol><p>如果想在应用中自定义复杂的异步任务，就需要在两类异步函数上构建。</p><h2 id="3-异步解决方案"><a href="#3-异步解决方案" class="headerlink" title="3. 异步解决方案"></a>3. 异步解决方案</h2><h3 id="3-1-回调"><a href="#3-1-回调" class="headerlink" title="3.1 回调"></a>3.1 回调</h3><p>一开始，JS 中的异步是通过回调实现的。如果想让某段代码将来执行，可以将它放在一个回掉函数中。例如下面的 node 代码，只有在文件读取完毕后，<code>&#39;finished&#39;</code>才会被打印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'/etc/passwd'</span>, (err, result) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finished'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是随着应用变得复杂，我们有许多异步事件需要处理，并且需要数据从一个事件传递到下一个事件，那么回调函数就会变得这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">step1(<span class="function"><span class="keyword">function</span>(<span class="params">result1</span>) </span>&#123;</span><br><span class="line">step2(<span class="function"><span class="keyword">function</span>(<span class="params">result2</span>) </span>&#123;</span><br><span class="line">        step3(<span class="function"><span class="keyword">function</span>(<span class="params">result3</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样的代码被称为<code>Callback Hell</code>（回调地狱），回调地狱主要以下有以下几大罪状</p><ol><li><p>代码丑陋，不符合人类阅读习惯</p></li><li><p>异常难以捕获</p><p><code>try/catch</code>是同步代码，上面的 step 函数运行时，<code>try/catch</code>已经执行完毕，异常并不能被捕获。</p></li><li><p>代码容易产生冗余</p><p>假设我们还有一个不同的操作需要在 step1 之后完成，那么得再来一段<code>Callback Hell</code>了……</p></li></ol><h3 id="3-2-Pub-Sub"><a href="#3-2-Pub-Sub" class="headerlink" title="3.2 Pub/Sub"></a>3.2 Pub/Sub</h3><p>Pub/Sub(发布/订阅)模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p><p>我觉得 Pub/Sub 模式和蝴蝶效应很像：某个事件被触发，整个应用都受到影响。</p><p>Pub/Sub 模式可以很好的解决回调地狱产生的代码冗余的问题。</p><p>DOM 事件就是很典型的 Pub/Sub 模式。例如下面的点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'the button is clicked'</span>); </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这里我们相当于订阅了<code>button</code>上面的点击事件，当用户点击之后，这个按钮就会向订阅者发布这个消息。</p><h3 id="3-3-Promise"><a href="#3-3-Promise" class="headerlink" title="3.3  Promise"></a>3.3  Promise</h3><p>事件（click, keyup）和 Pub/Sub 模式对于同一对象上发生多次的事情非常有用，但是关系到异步事件执行的成功或者失败，Pub/Sub 模式没有提供一个好的解决方案。Promise 很好的解决了这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设`ready()`返回一个 Promise.</span></span><br><span class="line">img.ready().then(<span class="function">(<span class="params">result</span>)=&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'success!'</span>); &#125;, (err) =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'failed!'</span>); &#125;)</span><br></pre></td></tr></table></figure><p>当然，Promise 在异步事件执行方面的优点不仅于此。</p><p>Promise 最早由社区提出和实现，常见的 Promise 的第三方库有</p><ul><li><a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">Q</a></li><li><a href="https://github.com/cujojs/when" target="_blank" rel="noopener">when</a></li><li><a href="https://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx" target="_blank" rel="noopener">WinJS</a></li><li><a href="https://github.com/tildeio/rsvp.js" target="_blank" rel="noopener">RSVP.js</a></li></ul><p>而官方则在 ES6 正式支持 Promise，并采用了 <a href="https://github.com/promises-aplus/promises-spec" target="_blank" rel="noopener">Promises/A+</a> 规范。</p><p>Promise 为什么叫 Promise 呢，我觉得 MDN 上面关于 Promise 的中文“翻译”很好的解释了这一点🙃：</p><blockquote><p><strong>Promise </strong>对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义：诺言，一个成功，一个失败。)</p><p>原文：</p><p>The <strong>Promise</strong> object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</p></blockquote><p>Promise 通过链接多个<code>then()</code>来处理多个异步操作，比回掉地狱优雅很多：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aPromiseStuff().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doPromiseStuff();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doAnotherPromiseStuff();</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于 Promise 的更多内容可以查看 MDN 上面的教程：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a></p><p>还有两篇关于 Promise 的文章很值得一读：</p><ul><li><a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="noopener">We have a problem with promises</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/promises" target="_blank" rel="noopener">JavaScript Promises: an Introduction</a></li></ul><h3 id="3-4-Generator"><a href="#3-4-Generator" class="headerlink" title="3.4 Generator"></a>3.4 Generator</h3><p>Generator Function 和 Generator 也是 ES6 引入的新特性。</p><p><code>function*</code>这种声明方式用来定义一个 Generator Function，后者会返回一个 Generator 对象。</p><p>当一个 Generator Function 被调用时并不会马上执行；相反，它会返回一个 Generator 对象。每次调用 Generator 对象的<code>next()</code>方法将会执行函数至下一个<code>yield</code>表达式，并返回一个符合迭代器协议的对象，包含<code>value</code>和<code>done</code>两个属性。<code>value</code>的值为<code>yield</code>表达式的运行结果，函数运行结束时其值为<code>undefined</code>；<code>done</code>的值表示函数是否运行结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">simpleGenerator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"first"</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"second"</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"third"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = simpleGenerator();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: "first", done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: "second", done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: "third", done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 0, done: false &#125;,</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 1, done: false &#125;,</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 1, done: false &#125;,</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: undefined, done: true &#125;,</span></span><br></pre></td></tr></table></figure><p>Generator Function 这种可以暂停执行和恢复执行的特性，使它能够有处理异步任务的能力。可是光有一个 Generator Function 还不够，它还需要有一个执行器来执行它所封装的异步任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">handleAsynchronousStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="keyword">yield</span> doSomething();</span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事具备，只欠一个<a href="https://github.com/tj/co" target="_blank" rel="noopener">co</a>:</p><blockquote><p>co:</p><p>Generator based control flow goodness for nodejs and the browser, using promises, letting you write non-blocking code in a nice-ish way.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line">co(handleAsynchronousStuff) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>我们再来看看 co 做了什么事:</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/co.png" alt="co 示意图"></p><p>co 的功能其实不算复杂，总共也就 200 多行代码。它不断递归拆解 generator function 中的 yield 表达式，并返回一个 Promise。它做的事情就是执行用 Generator 封装好的异步任务。</p><h4 id="Generator-错误处理"><a href="#Generator-错误处理" class="headerlink" title="Generator 错误处理"></a>Generator 错误处理</h4><p>generator 对象有一个 throw 方法，可以在 generator function 外面抛出异常，并且能够在 generator function 中使用<code>try/catch</code>捕获异常，详细内容可见 MDN 文档：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw" target="_blank" rel="noopener">Generator.prototype.throw()</a></p><p>那么，使用 Generator 处理异步任务可以优雅的捕获异常吗？答案是肯定的，我们再来啃一啃 co 的核心函数的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we wrap everything in a promise to avoid promise chaining,</span></span><br><span class="line">  <span class="comment">// which leads to memory leak errors.</span></span><br><span class="line">  <span class="comment">// see https://github.com/tj/co/issues/180</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> gen === <span class="string">'function'</span>) gen = gen.apply(ctx, args);</span><br><span class="line">    <span class="keyword">if</span> (!gen || <span class="keyword">typeof</span> gen.next !== <span class="string">'function'</span>) <span class="keyword">return</span> resolve(gen);</span><br><span class="line"></span><br><span class="line">    onFulfilled();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param &#123;Mixed&#125; res</span></span><br><span class="line"><span class="comment">     * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">     * @api private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ret;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        ret = gen.next(res);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">      next(ret);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param &#123;Error&#125; err</span></span><br><span class="line"><span class="comment">     * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">     * @api private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ret;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        ret = gen.throw(err);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">      next(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the next value in the generator,</span></span><br><span class="line"><span class="comment">     * return a promise.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; ret</span></span><br><span class="line"><span class="comment">     * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">     * @api private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">ret</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// generator function 执行完毕，Promise 状态变为 resolve</span></span><br><span class="line">      <span class="keyword">if</span> (ret.done) <span class="keyword">return</span> resolve(ret.value);</span><br><span class="line">      <span class="comment">// value =&gt; Promise</span></span><br><span class="line">      <span class="keyword">var</span> value = toPromise.call(ctx, ret.value);</span><br><span class="line">      <span class="comment">// 如果 value 成功转变为 Promise，则通过`Promise.then()`继续拆解 generator function，并为Promise 添加`onFulfilled`和`onRejected`</span></span><br><span class="line">      <span class="keyword">if</span> (value &amp;&amp; isPromise(value)) <span class="keyword">return</span> value.then(onFulfilled, onRejected);</span><br><span class="line">      <span class="keyword">return</span> onRejected(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'You may only yield a function, promise, generator, array, or object, '</span></span><br><span class="line">        + <span class="string">'but the following object was passed: "'</span> + <span class="built_in">String</span>(ret.value) + <span class="string">'"'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，它对 generator function 的异常处理封装在了 <code>onRejected()</code>函数当中：如果发生错误，则将返回的 Promise 的状态变为<code>reject</code>，再调用<code>next()</code>继续拆解 generator function。</p><p>通过 co 的处理，异步函数中的异常成功通过<code>gen.throw()</code>抛出，那么我们就可以跟同步代码一样使用<code>try/catch</code>捕获异常了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            reject(<span class="string">'something is wrong'</span>)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">handleAsynchronousStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="keyword">yield</span> doSomething();</span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error: '</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">co(handleAsynchronousStuff); <span class="comment">// Error: something is wrong</span></span><br></pre></td></tr></table></figure><p>嗯……不得不说 Generator 使异步处理的过程更加优雅了。但是 Generator 本身并不是专门用来处理异步任务的，而且在使用 Generator 这种方案时，还得引入第三方模块 co，总觉得有点变扭。</p><p>ES7：那就来个语法糖把它们包装一下吧！</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>ES7 正式引入<code>async/await</code>，它本质上就是 Generator 解决方案的语法糖，并且内置了执行器，上面的<code>handleAsynchronousStuff()</code>可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleAsynchronousStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="keyword">await</span> doSomething();</span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error: '</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleAsynchronousStuff();</span><br></pre></td></tr></table></figure><p>我觉得<code>async/await</code>相较于 Promise 的最直观的优点就是代码的可阅读性大大的提高了。在过去，我们需要链式地写<code>then()</code>来处理<code>Promise()</code>的<code>resolve</code>值，逻辑一复杂，嵌套的代码就越来越多，而<code>async/await</code>则让我们可以像写同步代码一样来写异步代码。</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/504.jpg" alt=""></p><p>关于<code>async/await</code>与<code>Promise</code>更详细的对比，可以见这篇文章：</p><ul><li><a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9" target="_blank" rel="noopener">6 Reasons Why JavaScript’s Async/Await Blows Promises Away</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>说到底，<code>async/await</code>就是基于 <code>Promise</code>和<code>Generator</code>的，要用好<code>async/await</code>，就必须先理解<code>Promise</code>和<code>Generator</code>。</p><p>这篇文章正是在阐述这样一个观点：在使用<code>async/await</code>之前，先理解<code>Promise</code></p><ul><li><a href="https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8" target="_blank" rel="noopener">Understand promises before you start using async/await</a></li></ul><p>说来惭愧，再还没有真正理解<code>Promise</code>和<code>Generator</code>之前我就已经在跟风使用<code>async/await</code>了，如今正是在恶补 JavaScript 异步解决方案的发展历程。现在再来看<code>async/await</code>，发现 JavaScript 这门语言的发展有很大一部分都是依赖于开源社区的贡献，不得不感叹开源社区的力量之强大。</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>《JavaScript 异步编程：设计快速响应的网络应用》</li><li><a href="http://taobaofed.org/blog/2016/03/18/error-handling-in-koa/" target="_blank" rel="noopener">如何优雅地在 koa 中处理错误</a></li><li>MDN</li></ul><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul><li><a href="https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8" target="_blank" rel="noopener">Understand promises before you start using async/await</a></li><li><a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="noopener">We have a problem with promises</a></li><li><a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9" target="_blank" rel="noopener">6 Reasons Why JavaScript’s Async/Await Blows Promises Away</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/promises" target="_blank" rel="noopener">JavaScript Promises: an Introduction</a></li></ul>]]></content>
    
    <summary type="html">
    
      你说我一个浏览器写写表单验证的，怎么就突然成为如今最流行的编程语言了呢？
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhoushidong.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解 JWT</title>
    <link href="http://zhoushidong.cc/2017/09/29/understanding-JWT/"/>
    <id>http://zhoushidong.cc/2017/09/29/understanding-JWT/</id>
    <published>2017-09-29T15:03:39.000Z</published>
    <updated>2017-09-30T12:04:52.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h2><p>JWT(JSON Web Token) 是一个基于 JSON 的<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">开放标准</a>，它允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p><p>JWT 本质上就是一串字符串，它由</p><ol><li>Header</li><li>Payload</li><li>Signature</li></ol><p>这三个部分组成，每个部分之间使用<code>.</code>进行分隔。</p><p>关于 JWT 的更多介绍可见 <a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/JWT.png" alt="jwt"></p><h2 id="JWT-使用流程"><a href="#JWT-使用流程" class="headerlink" title="JWT 使用流程"></a>JWT 使用流程</h2><p><img src="https://cdn.auth0.com/content/jwt/jwt-diagram.png" alt="jwt-diagram"></p><p>整个流程图很清晰明朗，但是在第三步和第四步之间，客户端是需要保存用户状态的，那么JWT 是如何存储在客户端的呢？</p><h2 id="浏览器端-JWT-存储方案"><a href="#浏览器端-JWT-存储方案" class="headerlink" title="浏览器端 JWT 存储方案"></a>浏览器端 JWT 存储方案</h2><h3 id="1-HTML5-WebStorage-localStorage-or-sessionStorage"><a href="#1-HTML5-WebStorage-localStorage-or-sessionStorage" class="headerlink" title="1. HTML5 WebStorage:  localStorage or sessionStorage"></a>1. HTML5 WebStorage:  localStorage or sessionStorage</h3><p>使用这种方案时，服务端一般将<code>token</code>放入<code>response body</code>中发送给客户端：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">&#123;</span><br><span class="line">  "token":"eyJhbGciOiJIUzI1R5cCIpXVCJ9.eyJpZCI6MSwiZW1W4MIjcwMDk2fQ.aYC_idpEATBit6QmOiNSTn_SY8v0o"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>localStorage 和 sessionStorage 是 HTML5 的特性，使用起来非常简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'token'</span>, response.body.token);</span><br></pre></td></tr></table></figure><h3 id="2-Cookie-Storage"><a href="#2-Cookie-Storage" class="headerlink" title="2. Cookie Storage"></a>2. Cookie Storage</h3><p>Cookie 的工作机制是用户识别及状态管理。调用 Cookie 时，由于可校验 Cookie 的有效期，以及发送方的域、路径、协议等有效信息，所以正规发布的 Cookie 内的数据不会因来自其他站点和攻击者的攻击而泄露。为 Cookie 服务的 HTTP header 有以下两种：</p><table><thead><tr><th>字段名</th><th>说明</th><th>header 字段类型</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>开始状态管理所使用的 Cookie 信息</td><td>响应字段</td></tr><tr><td>Cookie</td><td>服务端接收到的 Cookie 信息</td><td>请求字段</td></tr></tbody></table><p>验证用户信息成功后，服务端会将 JWT 放在HTTP header 中的<code>Set-Cookie</code>字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Set-Cookie</span>: access_token=eyJhbGciOiJIUzI1R5cCIpXVCJ9.eyJpZCI6MSwiZW1W4MIjcwMDk2fQ.aYC_idpEATBit6QmOiNSTn_SY8v0o; Secure; HttpOnly;</span><br></pre></td></tr></table></figure><p>这样一来，当客户端向服务端发送请求时，请求中的<code>Cookie</code>字段会包含从服务端接收到的<code>Cookie</code>。</p><h3 id="Which-one-is-better？"><a href="#Which-one-is-better？" class="headerlink" title="Which one is better？"></a>Which one is better？</h3><p>使用 WebStorage 存储<code>token</code>，那么任何运行在该网站上的 JS 代码都可以访问到<code>token</code>。如果网站遭到 XSS 攻击，那么用户信息就变得不安全了。所以包括 White Hat 在内的很多组织都建议不要将一些重要信息存储在 localStorage 和 sessionStorage 中。另外，在传输用户信息和 JWT 的过程中，数据也不是安全的，所以最好能将 Web 应用的升级成 HTTPS，使用 SSL 对通信进行加密。</p><p>使用<code>HttpOnly</code>属性的 cookie，是无法被 JS 代码获取的。同时，给 Cookie 增加<code>Secure</code>属性还可以确保 cookie 只能通过 HTTPS 传输。JWT 具有自包含的特性，所以携带 JWT 的 cookie 无需在服务端存储，开发者不必担心使用 cookie 会破坏 RESTful 的最佳实践。但是面对 CSRF 攻击，Cookie 也能被恶意窃取。默认情况下，无法通过 HTTP 跨域发送 cookie，若要跨域，需在<code>Access-Control-Allow-Origin</code>字段中指定明确的域名。</p><p>关于这两种方案的比较，这篇文章做了比较全面的描述：<a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage" target="_blank" rel="noopener">Where to Store Your Jwts</a></p><h3 id="通过-Authorization-Header-将发送-JWT"><a href="#通过-Authorization-Header-将发送-JWT" class="headerlink" title="通过 Authorization Header 将发送 JWT"></a>通过 Authorization Header 将发送 JWT</h3><p>若使用 WebStorage 作为存储方案，那么就需要 JWT 就需要通过<code>Authorization</code>头字段来发送。Authorization 由两部分组成</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span>: &lt;type&gt; &lt;credentials&gt;</span><br></pre></td></tr></table></figure><p>type 指的是验证类型，常见的有以下几种：</p><ul><li><strong>Basic</strong> (see <a href="http://tools.ietf.org/html/7617" target="_blank" rel="noopener">RFC 7617</a>, base64-encoded credentials.),</li><li><strong>Bearer</strong> (see <a href="http://tools.ietf.org/html/6750" target="_blank" rel="noopener">RFC 6750</a>, bearer tokens to access OAuth 2.0-protected resources),</li><li><strong>Digest</strong> (see <a href="http://tools.ietf.org/html/7616" target="_blank" rel="noopener">RFC 7616</a>, only md5 hashing is supported in Firefox, see <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=472823" target="_blank" rel="noopener">bug 472823</a>for SHA encryption support),</li><li><strong>HOBA</strong> (see <a href="http://tools.ietf.org/html/7486" target="_blank" rel="noopener">RFC 7486</a> (draft), HTTP Origin-Bound Authentication, digital-signature-based),</li></ul><p>每个验证类型的不同之处在于它们的适用范围（客户端类型和服务端类型），以及它们的加密强度。</p><p>根据RFC，传输 JWT 选择的 Bearer 类型。JWT 与 类型之间以空格分隔。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span>: Bearer eyJhbGciOiJIUzI1R5cCIpXVCJ9.eyJpZCI6MSwiZW1W4MIjcwMDk2fQ.aYC_idpEATBit6QmOiNSTn_SY8v0o; Secure; HttpOnly;</span><br></pre></td></tr></table></figure><h2 id="Use-JWT-or-not"><a href="#Use-JWT-or-not" class="headerlink" title="Use JWT  or not ?"></a>Use JWT  or not ?</h2><p>在 JWT 之前，人们往往是通过 cookie + session 的方式来解决服务器如何识别用户的问题:</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/session-cookie.png" alt="cookie-session"></p><p>通过比较可以看出，使用 JWT 可以省去服务端读取 Session 的操作，它可以充分依赖无状态 API，更加符合 RESTful 规范。</p><p>看起来，JWT 十分美好。</p><p>但是！综合来看，还是有其局限性，已经有人呼吁停止将 JWT 用于会话机制。</p><p><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using jwt for sessions</a>这篇文章将 JWT 的优劣分析的很详尽，也说明了 JWT 的真正使用场景。</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ol><li><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">JWT introduction</a></li><li><a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage" target="_blank" rel="noopener">Where to Store Your Jwts</a></li><li><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using jwt for sessions</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JWT-简介&quot;&gt;&lt;a href=&quot;#JWT-简介&quot; class=&quot;headerlink&quot; title=&quot;JWT 简介&quot;&gt;&lt;/a&gt;JWT 简介&lt;/h2&gt;&lt;p&gt;JWT(JSON Web Token) 是一个基于 JSON 的&lt;a href=&quot;https://tools
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://zhoushidong.cc/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>取模和取余的区别以及 JS 中的取模运算问题</title>
    <link href="http://zhoushidong.cc/2017/08/18/mod-vs-rem/"/>
    <id>http://zhoushidong.cc/2017/08/18/mod-vs-rem/</id>
    <published>2017-08-18T09:26:08.000Z</published>
    <updated>2017-09-10T02:51:20.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="取模-VS-取余"><a href="#取模-VS-取余" class="headerlink" title="取模 VS 取余"></a>取模 VS 取余</h3><p>取模运算（Modulo Operation）属于计算机术语，运算符为<code>%</code>。取余运算（Complementation ）就是平常数学运算中的求余数。它们两个概念有重叠的部分但又不完全一致。</p><p>先来看看除法运算中求余数的整个过程，a、b、c 和 d 分别为被除数、除数、商和被除数。</p><ol><li>求商：c = a / b;</li><li>求模或者余数：r =  a - c * b;</li></ol><p>取模和取余的区别体现在第一步：取余运算在求 c 时，向 0 方向舍弃小数位；取模运算则向<code>-∞</code>方向舍弃小数位。所以，当a 和 b 中其一为负数时，取模和取余的运算结果就不同了。例如：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">9 </span>/ (-<span class="number">4</span>) = -<span class="number">2.25</span></span><br></pre></td></tr></table></figure><p>取余运算就会把 c 取做 -2 ，运算结果为 1；取模运算则把 c 取做 -3，运算结果为 -3；</p><h3 id="JS-中的"><a href="#JS-中的" class="headerlink" title="JS 中的%"></a>JS 中的<code>%</code></h3><p>一般来讲，计算机语言中的<code>%</code>运算符代表的都是取模运算，然而在 JavaScript 中，<code>%</code>代表的是取余运算。</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/mod.png" alt="node 环境下的 % 运算和 python 环境下的 % 运算"></p><p>所以，在写 JS 时遇到这个问题不要慌，这不是个 bug，而是个 feature……</p><h3 id="在-JS-中进行取模运算："><a href="#在-JS-中进行取模运算：" class="headerlink" title="在 JS 中进行取模运算："></a>在 JS 中进行取模运算：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.mod = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">this</span> % n) + n) % n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ol><li><a href="https://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving#comment43942831_4467539" target="_blank" rel="noopener">Stackoverflow:javascript-modulo-not-behaving</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;取模-VS-取余&quot;&gt;&lt;a href=&quot;#取模-VS-取余&quot; class=&quot;headerlink&quot; title=&quot;取模 VS 取余&quot;&gt;&lt;/a&gt;取模 VS 取余&lt;/h3&gt;&lt;p&gt;取模运算（Modulo Operation）属于计算机术语，运算符为&lt;code&gt;%&lt;/cod
      
    
    </summary>
    
      <category term="Tech" scheme="http://zhoushidong.cc/categories/Tech/"/>
    
    
      <category term="JavaScript" scheme="http://zhoushidong.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《云图》———今夜我们聊聊人类</title>
    <link href="http://zhoushidong.cc/2017/08/04/Cloud-Atlas/"/>
    <id>http://zhoushidong.cc/2017/08/04/Cloud-Atlas/</id>
    <published>2017-08-04T09:47:24.000Z</published>
    <updated>2017-08-04T13:57:54.009Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，《云图》这本书是我高二买的，然而我在大二结束时才刚刚读完。</p><p>读完书的当天，我立刻把电影《云图》给看完了。很早就想看《云图》这部电影，但是一直憋着打算等到看完原著再去看电影，觉得这样无论是阅读体验还是观影体验都会好点。电影的完整版片长有172分钟，然后当时在中国上映的时候被剪成了134分钟。同样，今年的《迷失Z城》国内版也被剪了将近40分钟。这里只是举两个引进版本删减相对严重的例子。对电影的删减是严重影响观影体验的，关于这个话题不多谈，只希望国内能早日建立起电影分级制度。</p><p>《云图》这本书的叙事很特别。从19世纪到后末日未来，六个故事，六个主人公……《云图》是史诗没错，但从整体上来看，它的宏大叙事很与众不同。这六个故事不是按照时间顺序一一排列，而是按照按1-2-3-4-5-6-5-4-3-2-1排列。它以19世纪 Adam Ewing 的故事为开头，也是以 Adam Ewing 的故事结尾，像一个闭环。</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/2017-8-4/TIM%E5%9B%BE%E7%89%8720170804193739.jpg" alt="目录"></p><p>说实话，《云图》中的每个故事单独拿出来并不是特别吸引人，这也许是我读这这本书这么长时间的原因之一……但是读完之后你还是能与作者想表达的思想产生共鸣的。六个故事时间跨度很大，但是彼此之间相互联系。作者将这种联系具象化为胎记与云图六重奏。这里谈谈六个主人公的相同彗星胎记。胎记这个东西最直观的寓意就是他们是 related 的，或者说他们就是同一个人。但是，他们的性格、他们的经历又各不相同，具象化的表现就是他们的胎记在不同的位置。所以我觉得作者是想要表达的是，不同时代的他们看似毫不相同，但他们的行为导致了他们的命运存在某种程度上的殊途同归。</p><p>所以，宏观来看，他们的故事可以归纳为人类的故事，他们所处的时代人类历史上可能经历过好几次。当然，Sonmi 并不是真正的人类，但她却是那个时代的革命者，最后又被人类奉为神明。这是一个很有意思的地方。</p><p>有时候我觉得，作者就是处在一个上帝视角一边审视人类一边写着这本书的。</p><p>虽然说六个主人公所处不同的时代，但可以说他们的故事对我们来讲并不陌生：宗教与信仰、压迫与反抗、对真理的追寻、人性的复杂、生死离别、文明的陨落……太阳底下并无新鲜事，这些破烂事天天在人类身上发生，无论时代怎么变，人类还是人类，人性亘古不变。</p><blockquote><ul><li><p>Meronym：没错，前辈们的智慧征服了疾病，跨越了距离，插下了种子，但是它没有征服一件东西。人类心中的渴望，不，一种永无休止的渴望。</p></li><li><p>Zachry Bailey：渴望是什么？我问。前辈们拥有一切。</p></li><li><p>Meronym ：更多的能量，对。那时候整个世界很大，但是对于这种渴望还不够强烈。这种渴望让前辈们冲破天空，让海洋沸腾，用疯狂的原子毒化土壤，顽固地播撒腐烂的种子，于是孕育了新的灾难，小孩生下来都是怪胎。最后，令人心痛的是，很快，国家分裂成野蛮的部落，文明时代结束，仅有一些边边角角的地方还闪亮着最后一丝余火。</p><p>——《云图·思想刹路口及之后所有》</p></li></ul></blockquote><p><strong>以上是后末日时代 Zachry Bailey 与 Meronym 的对话，仿佛是对现实世界的警示。人类现在就在做他们对话中的事。</strong></p><p>这六个故事中，我最喜欢 Timothy Cavendish 逃出养老院的经历。作者用黑色幽默的笔法写了一个发生在现代的（21世纪初）追求自由的故事。读一段时，我觉得这个故事的基调很符合现代生活，似乎现代人的的确确就是生活在一个充满黑色幽默的世界。Timothy Cavendish 的生活丧到不行，人已年迈，但他仍然在努力摆脱生活窘境。想必他逃出养老院的那一刻会吟着 Dylan Thomas 的<code>Do not go gentle into that good night</code>吧。</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/2017-8-4/runaway.png" alt=""></p><p><strong>这是逃出养老院后，Timothy Cavendish 朋友们的对话</strong></p><p>看完电影，我不得不说这本书真的不适合改编成电影。电影对书中的情节倒是复现的挺完整的，但是把六个故事塞进一部电影还是会显得电影过于冗长与臃肿，尽管导演使用了许多艺术加工手段。再者，多条故事线来回切换难以会让没看过原著的观众感到不知所云。</p><p>但是，电影也有电影的优势。电影是以动态图像的方式在叙事，它的情感表现力是绝对超过文字的。影片结尾，主人公们都在历史上（至少是自己的历史上）画上了浓墨重彩的一笔，Because human nature is just like this .蒙太奇式的剪辑将「Robert Frobisher 的自杀、Sonmi 的处刑、Adam Ewing 带着妻子与他的岳父分道扬镳、Luisa Rey 与 Javier Gomez 庆祝胜利、Timothy Cavendish 与初恋共度晚年」衔接起来，加上恰到好处的配乐，最后的情感高潮给人带来极大的艺术享受与情感共鸣。这种震撼光读文字是无法体会得到的。或许这就是电影的魅力所在吧。</p><p>当然，他们的故事我们能感同身受的真正原因是我们也在经历与他们相同的故事，他们和我们都是波澜壮阔的云图的一部分。或许我们的身上也印着彗星状的胎记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说来惭愧，《云图》这本书是我高二买的，然而我在大二结束时才刚刚读完。&lt;/p&gt;
&lt;p&gt;读完书的当天，我立刻把电影《云图》给看完了。很早就想看《云图》这部电影，但是一直憋着打算等到看完原著再去看电影，觉得这样无论是阅读体验还是观影体验都会好点。电影的完整版片长有172分钟，然后
      
    
    </summary>
    
    
      <category term="读书" scheme="http://zhoushidong.cc/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="电影" scheme="http://zhoushidong.cc/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>The First Encounter With Socket</title>
    <link href="http://zhoushidong.cc/2017/04/26/The-First-Encounter-With-Socket/"/>
    <id>http://zhoushidong.cc/2017/04/26/The-First-Encounter-With-Socket/</id>
    <published>2017-04-26T12:42:09.000Z</published>
    <updated>2017-04-26T16:04:41.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络基础-TCP-IP"><a href="#网络基础-TCP-IP" class="headerlink" title="网络基础 TCP/IP"></a>网络基础 TCP/IP</h2><p>在讨论 Socket 之前，我们得先追本溯源，看看 TCP/IP 是什么。</p><p>计算机与网络设备之间的通信，就如大国之间的外交一样，需要一种规则。这种规则就成称为协议（protocol）。计算机网络协议中存在各种各样的内容：从电缆规格到 IP 地址的选定方法、双方建立通信的顺序，以及 Web 页面显示需要处理的步骤，等等。</p><p>而与互联网相关联的协议集合总称为 TCP/IP。</p><h3 id="TCP-IP-的分层"><a href="#TCP-IP-的分层" class="headerlink" title="TCP/IP 的分层"></a>TCP/IP 的分层</h3><p>TCP/IP 按层次分为4层：应用层、传输层、网络层和数据链路层。</p><table><thead><tr><th>layer</th><th>detail</th></tr></thead><tbody><tr><td>应用层</td><td>应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各类通用的应用服务。比如 FTP （File Transfer Protocol ）、HTTP、和DNS（Domain Name System）。</td></tr><tr><td>传输层</td><td>传输层提供处于网络连接中的两台计算机之间的数据。在传输层有两个性质不同的协议：TCP（Transmission Control Protocol）和 UDP （User Data Protocol）</td></tr><tr><td>网络层</td><td>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小单位。该层规定了到达对方计算机的传输路线，并把数据包传送给对方。</td></tr><tr><td>链路层</td><td>用来处理连接网络的硬件部分，包括控制操作系统、硬件的设备驱动，NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分。</td></tr></tbody></table><h3 id="TCP-IP-通信传输流"><a href="#TCP-IP-通信传输流" class="headerlink" title="TCP/IP 通信传输流"></a>TCP/IP 通信传输流</h3><p>利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通信，发送端从应用层往下走，接收端则从应用层往上走。</p><p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/TCP.jpg" alt="TCP/IP 通信传输流"></p><h2 id="Socket-的基本概念"><a href="#Socket-的基本概念" class="headerlink" title="Socket 的基本概念"></a>Socket 的基本概念</h2><p>Socket 是对 TCP/IP 协议族的一种封装，是应用层与TCP/IP协议族通信的中间软件抽象层。它把复杂的 TCP/IP 协议族隐藏在 Socket API 后面，对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。也就是说， TCP/IP 提供给程序员做网络开发所用的接口就是 Socket 编程接口。</p><h3 id="利用-Socket-建立网络连接的步骤与基本操作"><a href="#利用-Socket-建立网络连接的步骤与基本操作" class="headerlink" title="利用 Socket 建立网络连接的步骤与基本操作"></a>利用 Socket 建立网络连接的步骤与基本操作</h3><p>利用 Socket 建立网络至少需要一对 Socket，其中一个运行于客户端，称为 ClientSocket ,运行于服务端的称为 ServerSocket。</p><p>套接字（Socket 的译名）之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。<br>　　1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。<br>　　2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。<br>　　为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>　　3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p><p><img src="http://upload-images.jianshu.io/upload_images/2392820-d6b764fefd4de351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Socket 的基本操作（图是盗的）"></p><h2 id="常用的三种-Socket-类型"><a href="#常用的三种-Socket-类型" class="headerlink" title="常用的三种 Socket 类型"></a>常用的三种 Socket 类型</h2><ul><li>流式 Socket（SOCK_STREAM）:流式是一种面向连接的 Socket，针对于面向连接的 TCP服务应用</li><li>数据报式 Socket（SOCK_DGRAM）:数据报式 Socket 是一种无连接的 Socket，对应于无连接的UDP 服务应用。</li><li>Unix 域 Socket （Unix Domain Socket）：Socket API原本是为网络通讯设计的，但后来在Socket 的框架上发展出一种IPC机制，就是Unix  Domain Socket，用于同一台主机的进程间通讯。虽然网络socket也可用于同一台主机的进程间通讯（通过 loopback 地址127.0.0.1），但是Unix Domain Socket更有效率，不需要经过网络协议栈，只是将应用层数据从一个进程拷贝到另一个进程。</li></ul><h2 id="Socket-实践——在-Nodejs-中使用-TCP-套接字编程"><a href="#Socket-实践——在-Nodejs-中使用-TCP-套接字编程" class="headerlink" title="Socket 实践——在 Nodejs 中使用 TCP 套接字编程"></a>Socket 实践——在 Nodejs 中使用 TCP 套接字编程</h2><p>服务端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = net</span><br><span class="line">  .createServer(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`客户端<span class="subst">$&#123;c.remoteAddress&#125;</span>:<span class="subst">$&#123;c.remotePort&#125;</span>已连接`</span>);</span><br><span class="line">     <span class="comment">// "data" 事件处理函数</span></span><br><span class="line">    c.on(<span class="string">"data"</span>, data =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`来自客户端<span class="subst">$&#123;c.remoteAddress&#125;</span>:<span class="subst">$&#123;c.remotePort&#125;</span>的数据:<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">      c.write(<span class="string">`已收到你的数据`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    c.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`客户端<span class="subst">$&#123;c.remoteAddress&#125;</span>:<span class="subst">$&#123;c.remotePort&#125;</span>断开连接`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(port, host);</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.js</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line"></span><br><span class="line">client.connect(port, host, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`连接至<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 向服务端发送数据</span></span><br><span class="line">  client.write(<span class="string">`Hello!World!`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "data" 事件处理函数</span></span><br><span class="line">  client.on(<span class="string">"data"</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`服务器发回: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    client.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`断开连接`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《图解 HTTP》</li><li><a href="https://www.zhihu.com/question/39541968/answer/81841947" target="_blank" rel="noopener">TCP/IP、HTTP、Socket 的区别</a></li><li><a href="https://nodejs.org/api/net.html" target="_blank" rel="noopener">Net | Node.js Doc</a></li><li><a href="https://www.hacksparrow.com/tcp-socket-programming-in-node-js.html" target="_blank" rel="noopener">TCP Socket Programming in Node.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网络基础-TCP-IP&quot;&gt;&lt;a href=&quot;#网络基础-TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;网络基础 TCP/IP&quot;&gt;&lt;/a&gt;网络基础 TCP/IP&lt;/h2&gt;&lt;p&gt;在讨论 Socket 之前，我们得先追本溯源，看看 TCP/IP 是
      
    
    </summary>
    
      <category term="Tech" scheme="http://zhoushidong.cc/categories/Tech/"/>
    
    
      <category term="socket" scheme="http://zhoushidong.cc/tags/socket/"/>
    
      <category term="TCP" scheme="http://zhoushidong.cc/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>The pits I met when I use MongoDB</title>
    <link href="http://zhoushidong.cc/2017/04/23/The-pits-I-met-when-I-use-MongoDB/"/>
    <id>http://zhoushidong.cc/2017/04/23/The-pits-I-met-when-I-use-MongoDB/</id>
    <published>2017-04-22T16:11:42.000Z</published>
    <updated>2017-12-12T07:05:25.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Oh-my-bindIp"><a href="#1-Oh-my-bindIp" class="headerlink" title="1. Oh my bindIp"></a>1. Oh my bindIp</h2><p>在服务器上装了 MongDB 后，想在本地环境用可视化工具来管理 MongoDB ，可是死活连不上。后来发现在配置文件<code>/etc/mongod.conf</code>中，其默认的 bindIp 为 <code>127.0.0.1</code>，也就是说数据库只限内网访问。将其改为<code>0.0.0.0</code>或其他指定环境即可。若想指定多个 ip ，每个 ip 之间用逗号分隔。</p><h3 id="127-0-0-1-、-localhost-和-0-0-0-0"><a href="#127-0-0-1-、-localhost-和-0-0-0-0" class="headerlink" title="127.0.0.1 、 localhost 和  0.0.0.0"></a>127.0.0.1 、 localhost 和  0.0.0.0</h3><ul><li><p>127.0.0.1 是一个环回地址（Loopback address）。地址块 127.0.0.1/8 被保留作环回通信用。此范围中的地址绝不应出现在主机之外，发送至此地址的报文被作为同一虚拟网络设备上的入站报文（<a href="https://en.wikipedia.org/wiki/Loopback" target="_blank" rel="noopener">Loopback</a>），主要用于检查 TCP/IP 协议栈是否正确运行和本机对本机的链接。所以，在外部网络环境是访问不到 127.0.0.1 的。</p></li><li><p>localhost 是一个域名，它其实可以被配置为任意地址。平常我们认为 localhost = 127.0.0.0.1，是因为操作系统中的 hosts 文件定义了localhost = 127.0.0.1，在操作系统支持 ipv6 后，它同时还指向ipv6 的地址 [::1]。</p></li><li><p>在服务器的上下文中，0.0.0.0 代表的意思是“主机上所有本地的 IPv4 地址”，如果一个主机有两个 ip 地址，192.168.1.1 和 10.1.2.1，并且该主机上的一个服务监听的地址是0.0.0.0,那么通过两个 ip 地址都能够访问该服务。 </p><p>在路由中，0.0.0.0表示的是默认路由，即当路由表中没有找到完全匹配的路由的时候所对应的路由。</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference :"></a>Reference :</h3><ol><li><a href="https://en.wikipedia.org/w/index.php?title=0.0.0.0&amp;redirect=no" target="_blank" rel="noopener">0.0.0.0 | wikipedia</a></li><li><a href="https://serverfault.com/questions/78048/whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1" target="_blank" rel="noopener">What’s the difference between ip address 0.0.0.0 and 127.0.0.1?</a></li><li><a href="https://www.zhihu.com/question/23940717/answer/26230963" target="_blank" rel="noopener">localhost、127.0.0.1 和 本机IP 三者的区别?</a></li></ol>]]></content>
    
    <summary type="html">
    
      在服务器上装了 MongDB 后，想在本地环境用可视化工具来管理 MongoDB ，可是死活连不上。后来发现在配置文件`/etc/mongod.conf`中，其默认的 bindIp 为 `127.0.0.1`，也就是说数据库只限内网访问。将其改为`0.0.0.0`或其他指定环境即可。若想指定多个 ip ，每个 ip 之间用逗号分隔。
    
    </summary>
    
      <category term="Tech" scheme="http://zhoushidong.cc/categories/Tech/"/>
    
    
      <category term="MongoDB" scheme="http://zhoushidong.cc/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Log:2017-4-11</title>
    <link href="http://zhoushidong.cc/2017/04/12/Log-2017-4-11/"/>
    <id>http://zhoushidong.cc/2017/04/12/Log-2017-4-11/</id>
    <published>2017-04-12T14:46:01.000Z</published>
    <updated>2017-04-12T14:58:59.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">meta | MDN</a></li><li><a href="https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element" target="_blank" rel="noopener">The meta element | whatwg</a></li><li><a href="https://www.w3.org/TR/2016/REC-html51-20161101/document-metadata.html#the-meta-element" target="_blank" rel="noopener">The meta element | w3.org</a></li></ul><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><p>None.</p><h2 id="Thought-💭"><a href="#Thought-💭" class="headerlink" title="Thought 💭"></a>Thought 💭</h2><p>Have known more about <code>&lt;meta&gt;</code>. Gotta learn about <code>viewport</code> in a few days.</p><p>And I realized that official standards or documents are the best learning materials.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
  </entry>
  
  <entry>
    <title>最熟悉的陌生人——&lt;meta&gt; 标签</title>
    <link href="http://zhoushidong.cc/2017/04/11/%E8%B0%88%E8%B0%88-meta-%E6%A0%87%E7%AD%BE/"/>
    <id>http://zhoushidong.cc/2017/04/11/谈谈-meta-标签/</id>
    <published>2017-04-11T11:50:31.000Z</published>
    <updated>2017-04-11T15:42:14.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o6ljw8wcq.bkt.clouddn.com/blog/4-11/TIM%E6%88%AA%E5%9B%BE20170411195731.png" alt="meta 标签"></p><h2 id="元数据-Metadata"><a href="#元数据-Metadata" class="headerlink" title="元数据 Metadata"></a>元数据 Metadata</h2><p>在<code>html</code>中，每个<code>DOM</code>元素都有其内容模型（Content model）：</p><blockquote><p>An <a href="https://www.w3.org/TR/html51/infrastructure.html#html-element" target="_blank" rel="noopener">HTML element</a> must have contents that match the requirements described in the element’s content model.</p></blockquote><p>而所谓 <code>Content</code> 正是指该<code>DOM</code>元素的子项。根据 <code>Content</code> ，又可将<code>DOM</code>元素分为好几个类别，其中，<code>Metadata content</code>一类包含以下元素：  <code>&lt;base&gt;</code> <code>&lt;link&gt;</code> <code>&lt;meta&gt;</code> <code>&lt;noscript&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code> <code>&lt;template&gt;</code> <code>&lt;title&gt;</code></p><blockquote><p>Metadata content is content that sets up the presentation or behavior of the rest of the content, or that sets up the relationship of the document with other documents, or that conveys other “out of band” information.</p></blockquote><p>而<code>meta</code>元素用来表示那些不能由其他<code>Metadata content</code>类元素表示的元数据（Metadata），如页面的说明，关键字，最后修改日期等。移动互联网出现之后，其<code>name</code>属性中的<code>viewport</code>被广泛应用于移动 web。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>meta标签共有四个属性：</p><ol><li>charset</li><li>content</li><li>http-equiv</li><li>name（全局属性，在<code>&lt;meta&gt;</code>中有特殊含义）</li><li>itemprop（全局属性）</li></ol><h3 id="1-charset"><a href="#1-charset" class="headerlink" title="1.charset"></a>1.charset</h3><blockquote><p>The <code>charset</code> attribute specifies the character encoding used by the document. This is a <a href="https://www.w3.org/TR/html51/document-metadata.html#character-encoding-declaration" target="_blank" rel="noopener">character encoding declaration</a>.</p></blockquote><p>注意：每个<code>html</code>文档不能有多个具有<code>charset</code>属性的<code>meta</code>元素</p><p>关于编码详情：<a href="https://www.w3.org/TR/html51/document-metadata.html#specifying-the-documents-character-encoding" target="_blank" rel="noopener">https://www.w3.org/TR/html51/document-metadata.html#specifying-the-documents-character-encoding</a></p><h3 id="2-content"><a href="#2-content" class="headerlink" title="2.content"></a>2.content</h3><p>这个属性为 <code>http-equiv</code> 或 <code>name</code> 属性提供了与其相关的值的定义，其值取决于具体的上下文。</p><h3 id="3-http-equiv"><a href="#3-http-equiv" class="headerlink" title="3.http-equiv"></a>3.http-equiv</h3><p><code>http-equiv</code> 属性是一个可枚举属性。下表是属性可选关键字及这些关键字所映射的内容。</p><table><thead><tr><th>关键字</th><th>所映射的内容</th><th>备注</th></tr></thead><tbody><tr><td><code>content-language</code></td><td><a href="https://www.w3.org/TR/html51/document-metadata.html#statedef-http-equiv-content-language" target="_blank" rel="noopener">Content Language</a></td><td>已过时。 使用<code>&lt;html&gt;</code>元素上全局的 <strong>lang</strong> 属性来替代它。</td></tr><tr><td><code>content-type</code></td><td><a href="https://www.w3.org/TR/html51/document-metadata.html#statedef-http-equiv-content-type" target="_blank" rel="noopener">Encoding declaration</a></td><td>已过时。推荐使用<code>&lt;meta charset=&quot;&quot;&gt;</code>。不能和含有<code>charset</code>属性的<code>&lt;meta&gt;</code>标签同时使用。</td></tr><tr><td><code>default-style</code></td><td><a href="https://www.w3.org/TR/html51/document-metadata.html#statedef-http-equiv-default-style" target="_blank" rel="noopener">Default style</a></td><td></td></tr><tr><td><code>refresh</code></td><td><a href="https://www.w3.org/TR/html51/document-metadata.html#statedef-http-equiv-refresh" target="_blank" rel="noopener">Refresh</a></td><td></td></tr><tr><td><code>set-cookie</code></td><td><a href="https://www.w3.org/TR/html51/document-metadata.html#statedef-http-equiv-set-cookie" target="_blank" rel="noopener">Cookie setter</a></td><td>已过时。 使用HTTP header set-cookie 来替代它。</td></tr><tr><td><code>content-security-policy</code></td><td><a href="https://html.spec.whatwg.org/multipage/semantics.html#attr-meta-http-equiv-content-security-policy" target="_blank" rel="noopener">Content security policy</a></td><td></td></tr><tr><td><code>x-ua-compatible</code></td><td><a href="https://html.spec.whatwg.org/multipage/semantics.html#attr-meta-http-equiv-x-ua-compatible" target="_blank" rel="noopener">X-UA-Compatible</a></td></tr></tbody></table><ol><li><p><code>default-style</code></p><p>用于指定首选css。</p><blockquote><h2 id="Descriptions-for-attributes-specific-to-this-element"><a href="#Descriptions-for-attributes-specific-to-this-element" class="headerlink" title="Descriptions for attributes specific to this element"></a>Descriptions for attributes specific to this element</h2><ul><li><p><a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/meta.http-equiv.default-style.html#meta.http-equiv.attrs.http-equiv.default-style" target="_blank" rel="noopener">http-equiv</a> = “default-style”</p><p>Indicates that the <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/meta.html#meta" target="_blank" rel="noopener">meta</a> element is a pragma directive that specifies the document’s preferred stylesheet.</p></li><li><p><a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/meta.http-equiv.default-style.html#meta.http-equiv.attrs.content.default-style" target="_blank" rel="noopener">content</a> = <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/datatypes.html#common.data.default-style" target="_blank" rel="noopener">default-style name</a></p><p>Specifies the name of the document’s preferred stylesheet. The name must meet either of the following sets of constraints:</p><ul><li>The name must match the value of the <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/common-attributes.html#common.attrs.title" target="_blank" rel="noopener">title</a> attribute on a <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/link.html#link" target="_blank" rel="noopener">link</a> element in the same document, and that <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/link.html#link" target="_blank" rel="noopener">link</a> element must have an <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/link.html#link.attrs.href" target="_blank" rel="noopener">href</a> attribute that references the location of a CSS stylesheet.</li><li>The name must match the value of the <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/common-attributes.html#common.attrs.title" target="_blank" rel="noopener">title</a> attribute on a <a href="https://www.w3.org/TR/2010/WD-html-markup-20100624/style.html#style" target="_blank" rel="noopener">style</a> element in the same document, and the contents of that element must be a CSS stylesheet.</li></ul></li></ul></blockquote></li><li><p><code>refresh</code></p><p>每隔一段时间自动刷新并指向某页面，以下是使用举例</p><ol><li><p>新闻网站首页可能会在页面的头元素中包含以下标记，以确保页面每五分钟自动从服务器重新加载：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"300"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以将一系列页面用作自动幻灯片放映：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"20; URL=page4.html"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>content-security-policy</code></p><p>通常防止站点脚本攻击（XSS）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'; object-src 'none'"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>x-ua-compatible</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 指定IE使用最新版本渲染当前页面</span></span><br><span class="line"><span class="comment"> Note, the W3C validator will flag chrome=1 as an error.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-name"><a href="#4-name" class="headerlink" title="4.name"></a>4.name</h3><ol><li><p>application-name</p><p>设置 Web App 名称。可通过使用<code>lang</code>属性设置不同语言版本的名称。free-form string。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"application-name"</span> <span class="attr">content</span>=<span class="string">"zhizhi"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>author</p><p>标注网页作者。free-form string。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"zsd,clarkzsd@gmail.com"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>description</p><p>页面介绍。措辞应当合适，因为会在搜索引擎中显示。free-form string。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"betahouse工作室博客"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>keywords</p><p>页面关键字。set of comma-separated tokens。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"british,typeface,font,fonts,highway,highways"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>referrer</p><p>指定 referrer 策略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于 referrer 策略: <a href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy" target="_blank" rel="noopener">https://w3c.github.io/webappsec-referrer-policy/#referrer-policy</a></p></li><li><p>theme-color</p><p>HTML 规范定义：</p><blockquote><p>The value must be a string that matches the CSS <a href="https://drafts.csswg.org/css-color/#typedef-color" target="_blank" rel="noopener">color</a> production, defining a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. For example, a browser might color the page’s title bar with the specified value, or use it as a color highlight in a tab bar or task switcher.</p></blockquote><p>不过现在只有 Android 上面的 Chrome 支持 theme-color。</p><p><a href="https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android" target="_blank" rel="noopener">Support for theme-color in Chrome 39 for Android</a></p><p><img src="https://developers.google.com/web/updates/images/2014/11/theme-color-ss.png" alt="theme-color in chrome"></p><p>注意：<code>name</code>为<code>theme-color</code>的<code>meta</code>元素只能出现一次。</p></li><li><p>generator</p><blockquote><p>The value must be a free-form string that identifies one of the software packages used to generate the document. This value must not be used on pages whose markup is not generated by software, e.g. pages whose markup was written by a user in a text editor.</p></blockquote><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Here is what a tool called "Frontweaver" could include in its output, in the page's head element, to identify itself as the tool used to generate the page:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">generator</span> <span class="attr">content</span>=<span class="string">"Frontweaver 8.2"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在过去，某些网站编辑器（如 FrontPage）会在创建新的HTML文档或使用它们发布站点时自动插入生成器标签。这被认为是指“此页面是使用FrontPage创建的”。现在几乎不使用……</p></li><li><h5 id="Other-metadata-names"><a href="#Other-metadata-names" class="headerlink" title="Other metadata names"></a>Other metadata names</h5><p>任何人都可以创建并使用自己的扩展 metadata name。</p><p>详情：<a href="https://html.spec.whatwg.org/multipage/semantics.html#other-metadata-names" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/semantics.html#other-metadata-names</a></p></li><li><p>viewport</p><p>viewport 指的是 web 的可视区域。在不同的设备上，viewport 都不同。</p><p>meta viewport标签首先是由 Apple 在其 safari 浏览器中引入的，目的是解决移动设备的 viewport 问题。后来其他各大厂商纷纷也引入了对 viewport 的支持。</p><p>这个特性虽然被广泛使用，但仍然未被标准化。（在 w3c 规范中翻了好久没翻出来。。。）</p></li></ol><table><thead><tr><th>Value</th><th>可能值</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>一个正整数或者字符串 <code>device-width</code></td><td>defines the width, in pixels, of the viewport</td></tr><tr><td>height</td><td>一个正整数或者字符串 <code>device-height</code></td><td>defines the height, in pixels, of the viewport</td></tr><tr><td>initial-scale</td><td><code>一个0.0</code> 到<code>10.0之间的正数</code></td><td>defines the ratio between the device width (device-width in portrait mode or device-height in landscape mode) and the viewport size.</td></tr><tr><td>maximum-scale</td><td><code>一个0.0</code> 到<code>10.0之间的正数</code></td><td>defines the maximum value of the zoom; it must be greater or equal to the <code>minimum-scale</code> or the behavior is indeterminate.</td></tr><tr><td>minimum-scale</td><td><code>一个0.0</code> 到<code>10.0之间的正数</code></td><td>defines the minimum value of the zoom; it must be smaller or equal to the maximum-scale or the behavior is indeterminate.</td></tr><tr><td><code>user-scalable</code></td><td>一个布尔值（yes 或者no）</td><td>If set to <code>no</code>, the user is not able to zoom in the webpage. Default value is yes.</td></tr></tbody></table><p>​    <a href="https://www.w3schools.com/css/css_rwd_viewport.asp" target="_blank" rel="noopener">Learn more about viewport</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">meta | MDN</a></li><li><a href="https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element" target="_blank" rel="noopener">The meta element | whatwg</a></li><li><a href="https://www.w3.org/TR/2016/REC-html51-20161101/document-metadata.html#the-meta-element" target="_blank" rel="noopener">The meta element | w3.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://o6ljw8wcq.bkt.clouddn.com/blog/4-11/TIM%E6%88%AA%E5%9B%BE20170411195731.png&quot; alt=&quot;meta 标签&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;元数据-Metadata&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Tech" scheme="http://zhoushidong.cc/categories/Tech/"/>
    
    
      <category term="HTML" scheme="http://zhoushidong.cc/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Log:2017-4-10</title>
    <link href="http://zhoushidong.cc/2017/04/10/Log-2017-4-10/"/>
    <id>http://zhoushidong.cc/2017/04/10/Log-2017-4-10/</id>
    <published>2017-04-10T15:03:40.000Z</published>
    <updated>2017-04-12T14:47:03.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">meta | MDN</a></li><li><a href="https://nodesource.com/blog/configuring-your-npmrc-for-an-optimal-node-js-environment" target="_blank" rel="noopener">Configuring Your .npmrc for an Optimal Node.js Environment</a></li></ol><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><p>None.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
  </entry>
  
  <entry>
    <title>Log:2017-4-9</title>
    <link href="http://zhoushidong.cc/2017/04/09/Log-2017-4-9/"/>
    <id>http://zhoushidong.cc/2017/04/09/Log-2017-4-9/</id>
    <published>2017-04-09T10:08:55.000Z</published>
    <updated>2017-12-17T14:15:37.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><p>None.</p><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><ol><li><a href="https://github.com/clarkzsd/IFE-2017/tree/master/html%26css/task10" target="_blank" rel="noopener">IFE Flexbox practice</a></li></ol><h2 id="Thought-💭"><a href="#Thought-💭" class="headerlink" title="Thought 💭"></a>Thought 💭</h2><p>Today, we met the new guys. Young and passionate, they know more about tech stuff than me in the past when I participate the recruitment of β-house. Wow!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;p&gt;None.&lt;/p&gt;
&lt;h2 id=&quot;Practice-⚽&quot;&gt;&lt;a href=&quot;#Practice-⚽
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
  </entry>
  
  <entry>
    <title>Log:2017-4-8</title>
    <link href="http://zhoushidong.cc/2017/04/08/Log-2017-4-8/"/>
    <id>http://zhoushidong.cc/2017/04/08/Log-2017-4-8/</id>
    <published>2017-04-08T15:31:54.000Z</published>
    <updated>2017-04-08T15:54:58.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><p>None.</p><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><p>None.</p><h2 id="What-Happened-Today-❔"><a href="#What-Happened-Today-❔" class="headerlink" title="What Happened Today ❔"></a>What Happened Today ❔</h2><p>今天关于工作室的事情谈了很多。一是关于招新的事，二是关于工作室以后的发展。</p><p>从宣传开始算的话，我们的招新开始时间比去年晚了很多，然后从宣传开始到正式电话面试中间又由于各种事情拖了很长时间。由于校区的原因，招新主要由我们大二的负责。总的来说，大二的我们应对招新还是有点吃力的，一切都匆匆忙忙的，总感觉自己经验不足。面对明天的招新见面会也感觉没有准备充分。</p><p>关于工作室以后的发展，真的十分感谢工作室的前辈们为我们打下的基础。在团队建设方面，我们已经有自己的官网、博客和招新网站，现在又有了基于 Websocket 的聊天室和基于 flarum 的校园论坛（未推广上线）。前几天麻凯倩学姐又帮我们申请了 npm 的 group。在职的前辈们都十分关注工作室的发展。真的十分感谢。现在我们要做的事，就是在前辈们留下的基础上打造出属于 β-house 自己的面向校园的产品，这样工作室才能长远发展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;p&gt;None.&lt;/p&gt;
&lt;h2 id=&quot;Practice-⚽&quot;&gt;&lt;a href=&quot;#Practice-⚽
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
  </entry>
  
  <entry>
    <title>Log:2017-4-7</title>
    <link href="http://zhoushidong.cc/2017/04/07/Log-2017-4-7/"/>
    <id>http://zhoushidong.cc/2017/04/07/Log-2017-4-7/</id>
    <published>2017-04-07T02:49:10.000Z</published>
    <updated>2017-04-07T15:40:40.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h3><ol><li><a href="https://segmentfault.com/a/1190000002910324" target="_blank" rel="noopener">Flexbox 详解</a></li><li><a href="https://www.w3cplus.com/css3/a-visual-guide-to-css3-flexbox-properties.html" target="_blank" rel="noopener">a-visual-guide-to-css3-flexbox-properties</a></li></ol><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><ol><li><a href="https://github.com/clarkzsd/IFE-2017/tree/master/html%26css/task4" target="_blank" rel="noopener">Centering in CSS</a></li><li>Meet Flexbox(unfinished)</li></ol><h2 id="Thought-💭"><a href="#Thought-💭" class="headerlink" title="Thought 💭"></a>Thought 💭</h2><p>The world has become flat. So how can you stand out in comparison with the others?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;h3 id=&quot;Flexbox&quot;&gt;&lt;a href=&quot;#Flexbox&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
      <category term="css" scheme="http://zhoushidong.cc/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Log:2017-4-6</title>
    <link href="http://zhoushidong.cc/2017/04/06/Log-2017-4-6/"/>
    <id>http://zhoushidong.cc/2017/04/06/Log-2017-4-6/</id>
    <published>2017-04-06T14:40:43.000Z</published>
    <updated>2017-12-17T14:15:30.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><h3 id="Centering-in-CSS"><a href="#Centering-in-CSS" class="headerlink" title="Centering in CSS"></a>Centering in CSS</h3><ol><li><a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">Centering in CSS: A Complete Guide</a></li></ol><h3 id="Positioning-in-CSS"><a href="#Positioning-in-CSS" class="headerlink" title="Positioning in CSS"></a>Positioning in CSS</h3><ol><li><a href="http://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html" target="_blank" rel="noopener">HTML和CSS高级指南之二——定位详解</a></li></ol><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><p><a href="https://github.com/clarkzsd/IFE-2017/tree/master/html%26css/task4" target="_blank" rel="noopener">Centering in CSS</a>(unfinished)</p><h2 id="Thought-💭"><a href="#Thought-💭" class="headerlink" title="Thought 💭"></a>Thought 💭</h2><p>This world doesn’t deserve Superman. </p><p>Men are not good enough.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;h3 id=&quot;Centering-in-CSS&quot;&gt;&lt;a href=&quot;#Centering-in-CSS&quot;
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
      <category term="css" scheme="http://zhoushidong.cc/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Log:2017-4-5</title>
    <link href="http://zhoushidong.cc/2017/04/05/Log-2017-4-5/"/>
    <id>http://zhoushidong.cc/2017/04/05/Log-2017-4-5/</id>
    <published>2017-04-05T12:51:10.000Z</published>
    <updated>2017-04-05T13:59:22.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-📖"><a href="#Read-📖" class="headerlink" title="Read 📖"></a>Read 📖</h2><h3 id="CSS-Layout"><a href="#CSS-Layout" class="headerlink" title="CSS Layout"></a>CSS Layout</h3><ol><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">Learn CSS Layout</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">MDN：position</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener">MDN：float</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries" target="_blank" rel="noopener">MDN：media queries</a></li></ol><h3 id="CSS-Clearfix"><a href="#CSS-Clearfix" class="headerlink" title="CSS Clearfix"></a>CSS Clearfix</h3><ol><li><a href="http://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html" target="_blank" rel="noopener">advanced-html-css-lesson2-detailed-css-positioning</a></li></ol><h2 id="Practice-⚽"><a href="#Practice-⚽" class="headerlink" title="Practice ⚽"></a>Practice ⚽</h2><ol><li><a href="https://github.com/clarkzsd/IFE-2017/tree/master/html%26css/task3" target="_blank" rel="noopener">Three Column Layout</a></li></ol><h2 id="Idea-💡"><a href="#Idea-💡" class="headerlink" title="Idea 💡"></a>Idea 💡</h2><p>From this day onwards, note down what I read, what I program and what I think.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Read-📖&quot;&gt;&lt;a href=&quot;#Read-📖&quot; class=&quot;headerlink&quot; title=&quot;Read 📖&quot;&gt;&lt;/a&gt;Read 📖&lt;/h2&gt;&lt;h3 id=&quot;CSS-Layout&quot;&gt;&lt;a href=&quot;#CSS-Layout&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Log" scheme="http://zhoushidong.cc/categories/Log/"/>
    
    
      <category term="css" scheme="http://zhoushidong.cc/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>无题 2017年3月19日</title>
    <link href="http://zhoushidong.cc/2017/03/19/%E6%97%A0%E9%A2%98-2017%E5%B9%B43%E6%9C%8819%E6%97%A5/"/>
    <id>http://zhoushidong.cc/2017/03/19/无题-2017年3月19日/</id>
    <published>2017-03-19T15:15:13.000Z</published>
    <updated>2017-03-19T15:20:07.895Z</updated>
    
    <content type="html"><![CDATA[<p>藏在笼子中的灰暗时光啊，它是多么需要一点别样的色彩。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;藏在笼子中的灰暗时光啊，它是多么需要一点别样的色彩。&lt;/p&gt;

      
    
    </summary>
    
      <category term="言语" scheme="http://zhoushidong.cc/categories/%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义checkbox、radio样式</title>
    <link href="http://zhoushidong.cc/2017/02/28/%E8%87%AA%E5%AE%9A%E4%B9%89checkbox%E3%80%81radio%E6%A0%B7%E5%BC%8F/"/>
    <id>http://zhoushidong.cc/2017/02/28/自定义checkbox、radio样式/</id>
    <published>2017-02-28T07:35:49.000Z</published>
    <updated>2017-03-12T04:42:25.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p><a href="http://ife.baidu.com/course/detail/id/23" target="_blank" rel="noopener">自定义checkbox、radio样式</a></p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="一-伪元素与伪类"><a href="#一-伪元素与伪类" class="headerlink" title="一.伪元素与伪类"></a>一.伪元素与伪类</h2><p>CSS伪类是添加到选择器的关键字，指定要选择的元素的特殊状态。例如，:hover 将在用户悬停在选择器指定的元素上时应用样式。</p><p>而伪元素并不指定所选择元素的特殊状态，它指定的是所选择元素的某些部分，相当于是指定一个虚拟的DOM元素的样式，例如<code>::first-line</code>指定该元素的第一行的样式。</p><p><img src="https://ooo.0o0.ooo/2017/02/28/58b52dea12c11.png" alt="所有的伪元素"></p><p>为了更好的区分伪元素和伪类，CSS3中伪元素使用两个冒号(::)表示，伪类使用一个冒号(:)。</p><h2 id="二-雪碧图"><a href="#二-雪碧图" class="headerlink" title="二.雪碧图"></a>二.雪碧图</h2><p>CSS雪碧图的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。该图片使用CSS <code>background</code>和<code>background-position</code>属性渲染。</p><h2 id="三-需求实现"><a href="#三-需求实现" class="headerlink" title="三.需求实现"></a>三.需求实现</h2><h2 id="伪元素实现"><a href="#伪元素实现" class="headerlink" title="伪元素实现"></a>伪元素实现</h2><ol><li>实现原理：隐藏原生<code>input</code>标签，给与其关联的<code>label</code>添加样式，实现自定义控件。</li><li>代码：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radio1"</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio_label demo1_radio"</span> <span class="attr">for</span>=<span class="string">"radio1"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checkbox1"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox_label demo1_checkbox"</span> <span class="attr">for</span>=<span class="string">"checkbox1"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo1</span> &gt; <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid darkgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radio_label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.demo1_radio</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"\25CF"</span>;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.demo1_checkbox</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"\2714"</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>坑：<ul><li><code>content</code>属性用于在<code>::before</code>和<code>::after</code>伪元素中插入内容，其内容都是匿名的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element" target="_blank" rel="noopener">可替换元素</a>。在这里为了实现控件的选中效果，使用的是16进制 unicode 编码（计算机中每个字符都对应一个 unicode 编码）。</li><li>在指定控件在被选中时的状态样式时，需要根据<code>input:checked</code>与<code>label</code>的相邻关系来对其应用样式，这时需要用到相邻同胞选择器<code>+</code>（用于定位同一个父元素之下某个元素之后的元素）。</li></ul></li></ol><h2 id="雪碧图实现"><a href="#雪碧图实现" class="headerlink" title="雪碧图实现"></a>雪碧图实现</h2><ol><li><p>实现原理：隐藏<code>input</code>，给<code>label</code>加背景图片。使用<code>background</code>和<code>background-position</code>属性分别渲染出所需要的图片。（所以你点的可能是个假控件）。</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radio2"</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio_label demo2_radio"</span> <span class="attr">for</span>=<span class="string">"radio2"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checkbox2"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox_label demo2_checkbox"</span> <span class="attr">for</span>=<span class="string">"checkbox2"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo2</span> &gt; <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(http://p1.bqimg.com/567571/99322cf8c3283e42.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> + <span class="selector-class">.demo2_radio</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: -<span class="number">23px</span> -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span> + <span class="selector-class">.demo2_checkbox</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: -<span class="number">25px</span> -<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.demo2_radio</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: -<span class="number">58px</span> -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.demo2_checkbox</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: -<span class="number">60px</span> -<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>坑：找出精确的<code>background-position</code>需要借助 Photoshop……</p></li></ol><h2 id="优劣比较"><a href="#优劣比较" class="headerlink" title="优劣比较"></a>优劣比较</h2><ul><li>使用伪元素不产生http请求，性能较高。代码量较多。</li><li>使用雪碧图代码量较少。<code>background-position</code>的值需要十分精确，不然点击时会产生bug。但是，用雪碧图能更方便地实现自定义的元素样式。</li></ul>]]></content>
    
    <summary type="html">
    
      CSS伪类是添加到选择器的关键字，指定要选择的元素的特殊状态。例如，:hover 将在用户悬停在选择器指定的元素上时应用样式。
    
    </summary>
    
      <category term="Tech" scheme="http://zhoushidong.cc/categories/Tech/"/>
    
    
      <category term="css" scheme="http://zhoushidong.cc/tags/css/"/>
    
      <category term="ife" scheme="http://zhoushidong.cc/tags/ife/"/>
    
  </entry>
  
</feed>
